name: PR Deployment

on:
  issue_comment:
    types: [created]

jobs:
  deploy-check:
    runs-on: ubuntu-latest
    steps:
      - name: Acknowledge Deployment Request
        id: check
        uses: khan/pull-request-comment-trigger@master
        with:
          trigger: "/deploy"
          reaction: rocket
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
    outputs:
      triggered: ${{ steps.check.outputs.triggered }}

  deploy:
    runs-on: ubuntu-latest
    needs: deploy-check
    if: needs.deploy-check.outputs.triggered == 'true'
    env:
      DEV_STEP: PR-Build
      VERSION: ${{ github.event.comment.id }}
    steps:
      # Step 1: Retrieve Pull Request Details
      - name: Get Pull Request Ref
        id: get_pr_ref
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/:repository/pulls/:pull_number
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      # Step 2: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ fromJson(steps.get_pr_ref.outputs.data).head.ref }}

      # Step 3: Export Game
      - name: Export Game
        id: export
        uses: firebelley/godot-export@v6.0.0
        with:
          godot_executable_download_url: https://downloads.tuxfamily.org/godotengine/4.3/Godot_v4.3-stable_linux.x86_64.zip
          godot_export_templates_download_url: https://downloads.tuxfamily.org/godotengine/4.3/Godot_v4.3-stable_export_templates.tpz
          relative_project_path: ./dont-forget
          archive_output: true
          cache: true
          export_debug: true
          presets_to_export: "Windows Desktop, macOS, Linux"

      # Step 4: Upload Build Artifacts
      - name: Upload Windows Build
        uses: actions/upload-artifact@v4
        with:
          name: Windows
          path: ${{ steps.export.outputs.archive_directory }}/Windows Desktop.zip

      - name: Upload Mac Build
        uses: actions/upload-artifact@v4
        with:
          name: macOS
          path: ${{ steps.export.outputs.archive_directory }}/macOS.zip

      - name: Upload Linux Build
        uses: actions/upload-artifact@v4
        with:
          name: Linux
          path: ${{ steps.export.outputs.archive_directory }}/Linux.zip

      # Step 5: Update Deployment Status
      - name: Create Deployment
        id: create_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/deployments
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Set Deployment Status to In Progress
        id: start_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/deployments/:deployment_id/statuses
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Complete Deployment
        id: complete_deployment
        if: success()
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/deployments/:deployment_id/statuses
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

      - name: Mark Deployment as Failed
        id: failed_deployment
        if: failure()
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/deployments/:deployment_id/statuses
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
